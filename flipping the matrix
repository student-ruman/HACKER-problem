#include <stdio.h>
#include <stdlib.h>

// Function to find the maximum of four integers
int max_of_four(int a, int b, int c, int d) {
    int max1 = (a > b) ? a : b;
    int max2 = (c > d) ? c : d;
    return (max1 > max2) ? max1 : max2;
}

int flippingMatrix(int matrix_rows, int matrix_cols, int** matrix) {
    int n = matrix_rows / 2; // N is half the total dimension
    long long total_max_sum = 0;

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            // Get the four mirrored elements
            int val1 = matrix[i][j];
            int val2 = matrix[i][matrix_cols - 1 - j];
            int val3 = matrix[matrix_rows - 1 - i][j];
            int val4 = matrix[matrix_rows - 1 - i][matrix_cols - 1 - j];

            // Add the maximum of these four to the total sum
            total_max_sum += max_of_four(val1, val2, val3, val4);
        }
    }
    return (int)total_max_sum;
}

int main() {
    int q;
    scanf("%d", &q);

    while (q--) {
        int n;
        scanf("%d", &n);

        int matrix_rows = 2 * n;
        int matrix_cols = 2 * n;

        // Dynamically allocate the matrix
        int** matrix = (int**)malloc(matrix_rows * sizeof(int*));
        for (int i = 0; i < matrix_rows; i++) {
            matrix[i] = (int*)malloc(matrix_cols * sizeof(int));
            for (int j = 0; j < matrix_cols; j++) {
                scanf("%d", &matrix[i][j]);
            }
        }

        int result = flippingMatrix(matrix_rows, matrix_cols, matrix);
        printf("%d\n", result);

        // Free the dynamically allocated memory
        for (int i = 0; i < matrix_rows; i++) {
            free(matrix[i]);
        }
        free(matrix);
    }

    return 0;
}
